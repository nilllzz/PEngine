<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly Name="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="EnvDTE" #>
<#@ output extension=".mgcb" #>

#----------------------------- Global Properties ----------------------------#

/outputDir:bin/Windows
/intermediateDir:obj/Windows
/platform:Windows
/config:
/profile:Reach
/compress:False

#-------------------------------- References --------------------------------#


#---------------------------------- Content ---------------------------------#
<#
	var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
	var project = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;
	var rootFolderName = "Content";

	ProjectItem rootFolder = null; 
	foreach(ProjectItem projectItem in project.ProjectItems)
	{
		var name = projectItem.Name;
		if (projectItem.Name == rootFolderName)
		{
			rootFolder = projectItem;
			break;
		}
	}

	if (rootFolder != null)
	{
        ProcessFolder(rootFolder, "");
	}
#>
<#+
#><#+
    void ProcessFolder(ProjectItem folder, string path)
    {
        foreach (ProjectItem item in folder.ProjectItems)
        {
            if (item.Kind == EnvDTE.Constants.vsProjectItemKindPhysicalFolder)
            {
                ProcessFolder(item, path + item.Name + "/");
            }
            else if (IsResource(item))
            {
                ProcessFile(item, path);
            }
        }
    }

    void ProcessFile(ProjectItem file, string path)
    {
        #>#begin <#= path + file.Name #><#+
        string fileExtension = file.Name.Remove(0, file.Name.LastIndexOf(".") + 1).ToLowerInvariant();
        string instruction = "build";

        switch (fileExtension)
        {
            case "spritefont":
                BuildSpritefont(file);
                break;
            case "png":
                BuildTexture(file);
                break;
            case "mp3":
				if (path.Contains("Sounds"))
					BuildSoundMp3(file);
				else
					BuildMusic(file);
                break;
            case "wav":
				if (path.Contains("Music"))
					BuildMusicWav(file);
				else
					BuildSound(file);
                break;
            case "fx":
                BuildEffect(file);
                break;
            case "json":
                instruction = "copy";
                break;
        }

        #><#= "\r\n/" + instruction + ":" + path + file.Name + "\r\n\r\n" #><#+
    }
    
    void BuildEffect(ProjectItem file)
    {
        #>

/importer:EffectImporter
/processor:EffectProcessor
/processorParam:DebugMode=Auto<#+
    }

    void BuildSpritefont(ProjectItem file)
    {
        #>

/importer:FontDescriptionImporter
/processor:FontDescriptionProcessor
/processorParam:TextureFormat=Compressed<#+
    }

    void BuildMusic(ProjectItem file)
    {
        #>

/importer:Mp3Importer
/processor:SongProcessor
/processorParam:Quality=Best<#+
    }
	
    void BuildMusicWav(ProjectItem file)
    {
        #>
		
/importer:WavImporter
/processor:SongProcessor
/processorParam:Quality=Best<#+
    }
	
    void BuildSoundMp3(ProjectItem file)
    {
        #>

/importer:Mp3Importer
/processor:SoundEffectProcessor
/processorParam:Quality=Best<#+
    }

    void BuildSound(ProjectItem file)
    {
        #>

/importer:WavImporter
/processor:SoundEffectProcessor
/processorParam:Quality=Best<#+
    }

    void BuildTexture(ProjectItem file)
    {
        #>

/importer:TextureImporter
/processor:TextureProcessor
/processorParam:ColorKeyColor=255,0,255,255
/processorParam:ColorKeyEnabled=True
/processorParam:GenerateMipmaps=False
/processorParam:PremultiplyAlpha=True
/processorParam:ResizeToPowerOfTwo=False
/processorParam:MakeSquare=False
/processorParam:TextureFormat=Color<#+
    }

	bool IsResource(ProjectItem projectItem)
	{
		if (projectItem.Kind == EnvDTE.Constants.vsProjectItemKindPhysicalFile)
		{
			return projectItem.Name.EndsWith(".png") ||
				projectItem.Name.EndsWith(".spritefont") ||
				projectItem.Name.EndsWith(".mp3") ||
				projectItem.Name.EndsWith(".wav") ||
				projectItem.Name.EndsWith(".json") ||
				projectItem.Name.EndsWith(".fx");
		}
		return false;
	}
#>